commit 18eb862d454a41012ccdd5127715ef7cd2a711ec
Author: Stefan Liebler <stli@linux.ibm.com>
Date:   Tue Dec 18 13:57:06 2018 +0100

    S390: Refactor memcpy/mempcpy ifunc handling.
    
    This patch moves all ifunc variants for memcpy/mempcpy
    to sysdeps/s390/memcpy-z900.S. The configure-check/preprocessor logic
    in sysdeps/s390/ifunc-memcpy.h decides if ifunc is needed at all
    and which ifunc variants should be available.
    E.g. if the compiler/assembler already supports z196 by default,
    the older ifunc variants are not included.
    If we only need the newest ifunc variant,
    then we can skip ifunc at all.
    
    Therefore the ifunc-resolvers and __libc_ifunc_impl_list are adjusted
    in order to handle only the available ifunc variants.
    
    ChangeLog:
    
            * sysdeps/s390/ifunc-memcpy.h: New File.
            * sysdeps/s390/memcpy.S: Move to ...
            * sysdeps/s390/memcpy-z900.S ... here.
            Move implementations from memcpy-s390x.s to here.
            * sysdeps/s390/multiarch/memcpy-s390x.S: Delete File.
            * sysdeps/s390/multiarch/Makefile (sysdep_routines):
            Remove memcpy/mempcpy variants.
            * sysdeps/s390/Makefile (sysdep_routines):
            Add memcpy/mempcpy variants.
            * sysdeps/s390/multiarch/ifunc-impl-list.c
            (__libc_ifunc_impl_list): Adjust ifunc variants for
            memcpy and mempcpy.
            * sysdeps/s390/multiarch/memcpy.c: Move ifunc resolver
            to ...
            * sysdeps/s390/memcpy.c: ... here.
            Adjust ifunc variants for memcpy.
            * sysdeps/s390/multiarch/mempcpy.c: Move to ...
            * sysdeps/s390/mempcpy.c: ... here.
            Adjust ifunc variants for mempcpy.
            * sysdeps/s390/mempcpy.S: Delete file.

diff --git a/sysdeps/s390/Makefile b/sysdeps/s390/Makefile
index c59cbdc25aad408a..838950a5ab958e31 100644
--- a/sysdeps/s390/Makefile
+++ b/sysdeps/s390/Makefile
@@ -32,5 +32,6 @@ endif
 
 ifeq ($(subdir),string)
 sysdep_routines += bzero memset memset-z900 \
-		   memcmp memcmp-z900
+		   memcmp memcmp-z900 \
+		   mempcpy memcpy memcpy-z900
 endif
diff --git a/sysdeps/s390/ifunc-memcpy.h b/sysdeps/s390/ifunc-memcpy.h
new file mode 100644
index 0000000000000000..51c71baa2c0b0452
--- /dev/null
+++ b/sysdeps/s390/ifunc-memcpy.h
@@ -0,0 +1,68 @@
+/* memcpy variant information on S/390 version.
+   Copyright (C) 2018 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#if defined SHARED && defined USE_MULTIARCH && IS_IN (libc)	\
+  && ! defined HAVE_S390_MIN_Z196_ZARCH_ASM_SUPPORT
+# define HAVE_MEMCPY_IFUNC	1
+#else
+# define HAVE_MEMCPY_IFUNC	0
+#endif
+
+#if defined HAVE_S390_MIN_Z196_ZARCH_ASM_SUPPORT
+# define MEMCPY_DEFAULT		MEMCPY_Z196
+# define MEMPCPY_DEFAULT	MEMPCPY_Z196
+# define HAVE_MEMCPY_Z900_G5	0
+# define HAVE_MEMCPY_Z10	0
+# define HAVE_MEMCPY_Z196	1
+#elif defined HAVE_S390_MIN_Z10_ZARCH_ASM_SUPPORT
+# define MEMCPY_DEFAULT		MEMCPY_Z10
+# define MEMPCPY_DEFAULT	MEMPCPY_Z10
+# define HAVE_MEMCPY_Z900_G5	0
+# define HAVE_MEMCPY_Z10	1
+# define HAVE_MEMCPY_Z196	HAVE_MEMCPY_IFUNC
+#else
+# define MEMCPY_DEFAULT		MEMCPY_Z900_G5
+# define MEMPCPY_DEFAULT	MEMPCPY_Z900_G5
+# define HAVE_MEMCPY_Z900_G5	1
+# define HAVE_MEMCPY_Z10	HAVE_MEMCPY_IFUNC
+# define HAVE_MEMCPY_Z196	HAVE_MEMCPY_IFUNC
+#endif
+
+#if HAVE_MEMCPY_Z900_G5
+# define MEMCPY_Z900_G5		__memcpy_default
+# define MEMPCPY_Z900_G5	__mempcpy_default
+#else
+# define MEMCPY_Z900_G5		NULL
+# define MEMPCPY_Z900_G5	NULL
+#endif
+
+#if HAVE_MEMCPY_Z10
+# define MEMCPY_Z10		__memcpy_z10
+# define MEMPCPY_Z10		__mempcpy_z10
+#else
+# define MEMCPY_Z10		NULL
+# define MEMPCPY_Z10		NULL
+#endif
+
+#if HAVE_MEMCPY_Z196
+# define MEMCPY_Z196		__memcpy_z196
+# define MEMPCPY_Z196		__mempcpy_z196
+#else
+# define MEMCPY_Z196		NULL
+# define MEMPCPY_Z196		NULL
+#endif
diff --git a/sysdeps/s390/memcpy.S b/sysdeps/s390/memcpy-z900.S
similarity index 50%
rename from sysdeps/s390/memcpy.S
rename to sysdeps/s390/memcpy-z900.S
index 2a6c6b750377c7bb..3a50cf44d85d2417 100644
--- a/sysdeps/s390/memcpy.S
+++ b/sysdeps/s390/memcpy-z900.S
@@ -19,6 +19,7 @@
 
 #include <sysdep.h>
 #include "asm-syntax.h"
+#include <ifunc-memcpy.h>
 
 /* INPUT PARAMETERS
      %r2 = address of destination memory area
@@ -41,50 +42,46 @@
 # define BRCTG	brct
 #endif /* ! defined __s390x__  */
 
-ENTRY(__mempcpy)
-#if defined __s390x__
+#if HAVE_MEMCPY_Z900_G5
+ENTRY(MEMPCPY_Z900_G5)
+# if defined __s390x__
 	.machine "z900"
-#else
+# else
 	.machine "g5"
-#endif /* ! defined __s390x__  */
+# endif /* ! defined __s390x__  */
 	LGR     %r1,%r2             # Use as dest
 	la      %r2,0(%r4,%r2)      # Return dest + n
 	j	.L_Z900_G5_start
-END(__mempcpy)
-#ifndef USE_MULTIARCH
-libc_hidden_def (__mempcpy)
-weak_alias (__mempcpy, mempcpy)
-libc_hidden_builtin_def (mempcpy)
-#endif
+END(MEMPCPY_Z900_G5)
 
-ENTRY(memcpy)
-#if defined __s390x__
+ENTRY(MEMCPY_Z900_G5)
+# if defined __s390x__
 	.machine "z900"
-#else
+# else
 	.machine "g5"
-#endif /* ! defined __s390x__  */
+# endif /* ! defined __s390x__  */
 	LGR     %r1,%r2             # r1: Use as dest ; r2: Return dest
 .L_Z900_G5_start:
 	LTGR    %r4,%r4
 	je      .L_Z900_G5_4
 	AGHI    %r4,-1
-#if defined __s390x__
+# if defined __s390x__
 	srlg	%r5,%r4,8
-#else
+# else
 	lr	%r5,%r4
 	srl	%r5,8
-#endif /* ! defined __s390x__  */
+# endif /* ! defined __s390x__  */
 	LTGR    %r5,%r5
 	jne     .L_Z900_G5_13
 .L_Z900_G5_3:
-#if defined __s390x__
+# if defined __s390x__
 	larl    %r5,.L_Z900_G5_15
-# define Z900_G5_EX_D 0
-#else
+#  define Z900_G5_EX_D 0
+# else
 	basr    %r5,0
 .L_Z900_G5_14:
-# define Z900_G5_EX_D .L_Z900_G5_15-.L_Z900_G5_14
-#endif /* ! defined __s390x__  */
+#  define Z900_G5_EX_D .L_Z900_G5_15-.L_Z900_G5_14
+# endif /* ! defined __s390x__  */
 	ex      %r4,Z900_G5_EX_D(%r5)
 .L_Z900_G5_4:
 	br      %r14
@@ -99,10 +96,8 @@ ENTRY(memcpy)
 	j       .L_Z900_G5_3
 .L_Z900_G5_15:
 	mvc     0(1,%r1),0(%r3)
-END(memcpy)
-#ifndef USE_MULTIARCH
-libc_hidden_builtin_def (memcpy)
-#endif
+END(MEMCPY_Z900_G5)
+#endif /* HAVE_MEMCPY_Z900_G5  */
 
 ENTRY(__memcpy_mvcle)
 	# Using as standalone function will result in unexpected
@@ -126,3 +121,104 @@ END(__memcpy_mvcle)
 #undef LGR
 #undef AGHI
 #undef BRCTG
+
+#if HAVE_MEMCPY_Z10
+ENTRY(MEMPCPY_Z10)
+	.machine "z10"
+	.machinemode "zarch_nohighgprs"
+	lgr     %r1,%r2         # Use as dest
+	la      %r2,0(%r4,%r2)  # Return dest + n
+	j	.L_Z10_start
+END(MEMPCPY_Z10)
+
+ENTRY(MEMCPY_Z10)
+	.machine "z10"
+	.machinemode "zarch_nohighgprs"
+	lgr     %r1,%r2         # r1: Use as dest ; r2: Return dest
+.L_Z10_start:
+# if !defined __s390x__
+	llgfr	%r4,%r4
+# endif /* !defined __s390x__  */
+	cgije   %r4,0,.L_Z10_4
+	aghi    %r4,-1
+	srlg    %r5,%r4,8
+	cgijlh  %r5,0,.L_Z10_13
+.L_Z10_3:
+	exrl    %r4,.L_Z10_15
+.L_Z10_4:
+	br      %r14
+.L_Z10_13:
+	cgfi    %r5,65535	# Switch to mvcle for copies >16MB
+	jh      __memcpy_mvcle
+.L_Z10_12:
+	pfd     1,768(%r3)
+	pfd     2,768(%r1)
+	mvc     0(256,%r1),0(%r3)
+	la      %r1,256(%r1)
+	la      %r3,256(%r3)
+	brctg   %r5,.L_Z10_12
+	j       .L_Z10_3
+.L_Z10_15:
+	mvc     0(1,%r1),0(%r3)
+END(MEMCPY_Z10)
+#endif /* HAVE_MEMCPY_Z10  */
+
+#if HAVE_MEMCPY_Z196
+ENTRY(MEMPCPY_Z196)
+	.machine "z196"
+	.machinemode "zarch_nohighgprs"
+	lgr     %r1,%r2         # Use as dest
+	la      %r2,0(%r4,%r2)  # Return dest + n
+	j	.L_Z196_start
+END(MEMPCPY_Z196)
+
+ENTRY(MEMCPY_Z196)
+	.machine "z196"
+	.machinemode "zarch_nohighgprs"
+	lgr     %r1,%r2         # r1: Use as dest ; r2: Return dest
+.L_Z196_start:
+# if !defined __s390x__
+	llgfr	%r4,%r4
+# endif /* !defined __s390x__  */
+	ltgr    %r4,%r4
+	je      .L_Z196_4
+	aghi    %r4,-1
+	srlg    %r5,%r4,8
+	ltgr    %r5,%r5
+	jne     .L_Z196_5
+.L_Z196_3:
+	exrl    %r4,.L_Z196_14
+.L_Z196_4:
+	br      %r14
+.L_Z196_5:
+	cgfi    %r5,262144      # Switch to mvcle for copies >64MB
+	jh      __memcpy_mvcle
+.L_Z196_2:
+	pfd     1,768(%r3)
+	pfd     2,768(%r1)
+	mvc     0(256,%r1),0(%r3)
+	aghi    %r5,-1
+	la      %r1,256(%r1)
+	la      %r3,256(%r3)
+	jne     .L_Z196_2
+	j       .L_Z196_3
+.L_Z196_14:
+	mvc     0(1,%r1),0(%r3)
+END(MEMCPY_Z196)
+#endif /* HAVE_MEMCPY_Z196  */
+
+#if ! HAVE_MEMCPY_IFUNC
+/* If we don't use ifunc, define an alias for mem[p]cpy here.
+   Otherwise see sysdeps/s390/mem[p]cpy.c.  */
+strong_alias (MEMCPY_DEFAULT, memcpy)
+strong_alias (MEMPCPY_DEFAULT, __mempcpy)
+weak_alias (__mempcpy, mempcpy)
+#endif
+
+#if defined SHARED && IS_IN (libc)
+/* Defines the internal symbols.
+   Compare to libc_hidden_[builtin_]def (mem[p]cpy) in string/mem[p]cpy.c.  */
+strong_alias (MEMCPY_DEFAULT, __GI_memcpy)
+strong_alias (MEMPCPY_DEFAULT, __GI_mempcpy)
+strong_alias (MEMPCPY_DEFAULT, __GI___mempcpy)
+#endif
diff --git a/sysdeps/s390/multiarch/memcpy.c b/sysdeps/s390/memcpy.c
similarity index 60%
rename from sysdeps/s390/multiarch/memcpy.c
rename to sysdeps/s390/memcpy.c
index c9577a854a0c7e68..90a53ac27d4be755 100644
--- a/sysdeps/s390/multiarch/memcpy.c
+++ b/sysdeps/s390/memcpy.c
@@ -16,12 +16,34 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
-/* In the static lib memcpy is needed before the reloc is resolved.  */
-#if defined SHARED && IS_IN (libc)
+#include <ifunc-memcpy.h>
+
+#if HAVE_MEMCPY_IFUNC
 # define memcpy __redirect_memcpy
 # include <string.h>
 # undef memcpy
 # include <ifunc-resolve.h>
 
-s390_libc_ifunc (__redirect_memcpy, __memcpy, memcpy)
+# if HAVE_MEMCPY_Z900_G5
+extern __typeof (__redirect_memcpy) MEMCPY_Z900_G5 attribute_hidden;
+# endif
+
+# if HAVE_MEMCPY_Z10
+extern __typeof (__redirect_memcpy) MEMCPY_Z10 attribute_hidden;
+# endif
+
+# if HAVE_MEMCPY_Z196
+extern __typeof (__redirect_memcpy) MEMCPY_Z196 attribute_hidden;
+# endif
+
+s390_libc_ifunc_expr (__redirect_memcpy, memcpy,
+		      ({
+			s390_libc_ifunc_init ();
+			(HAVE_MEMCPY_Z196 && S390_IS_Z196 (stfle_bits))
+			  ? MEMCPY_Z196
+			  : (HAVE_MEMCPY_Z10 && S390_IS_Z10 (stfle_bits))
+			  ? MEMCPY_Z10
+			  : MEMCPY_DEFAULT;
+		      })
+		      )
 #endif
diff --git a/sysdeps/s390/mempcpy.S b/sysdeps/s390/mempcpy.S
deleted file mode 100644
index 18ef29213e26e76d..0000000000000000
--- a/sysdeps/s390/mempcpy.S
+++ /dev/null
@@ -1,19 +0,0 @@
-/* CPU specific mempcpy without multiarch - 32/64 bit S/390 version.
-   Copyright (C) 2016-2018 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-/* mempcpy is implemented in memcpy.S.  */
diff --git a/sysdeps/s390/multiarch/mempcpy.c b/sysdeps/s390/mempcpy.c
similarity index 63%
rename from sysdeps/s390/multiarch/mempcpy.c
rename to sysdeps/s390/mempcpy.c
index 363fe47aefb80978..a6a237312659c2c1 100644
--- a/sysdeps/s390/multiarch/mempcpy.c
+++ b/sysdeps/s390/mempcpy.c
@@ -16,8 +16,9 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#include <ifunc-memcpy.h>
 
-#if defined SHARED && IS_IN (libc)
+#if HAVE_MEMCPY_IFUNC
 # define mempcpy __redirect_mempcpy
 # define __mempcpy __redirect___mempcpy
 # define __NO_STRING_INLINES
@@ -27,6 +28,27 @@
 # undef __mempcpy
 # include <ifunc-resolve.h>
 
-s390_libc_ifunc (__redirect___mempcpy, ____mempcpy, __mempcpy)
+# if HAVE_MEMCPY_Z900_G5
+extern __typeof (__redirect___mempcpy) MEMPCPY_Z900_G5 attribute_hidden;
+# endif
+
+# if HAVE_MEMCPY_Z10
+extern __typeof (__redirect___mempcpy) MEMPCPY_Z10 attribute_hidden;
+# endif
+
+# if HAVE_MEMCPY_Z196
+extern __typeof (__redirect___mempcpy) MEMPCPY_Z196 attribute_hidden;
+# endif
+
+s390_libc_ifunc_expr (__redirect___mempcpy, __mempcpy,
+		      ({
+			s390_libc_ifunc_init ();
+			(HAVE_MEMCPY_Z196 && S390_IS_Z196 (stfle_bits))
+			  ? MEMPCPY_Z196
+			  : (HAVE_MEMCPY_Z10 && S390_IS_Z10 (stfle_bits))
+			  ? MEMPCPY_Z10
+			  : MEMPCPY_DEFAULT;
+		      })
+		      )
 weak_alias (__mempcpy, mempcpy);
 #endif
diff --git a/sysdeps/s390/multiarch/Makefile b/sysdeps/s390/multiarch/Makefile
index 3cbd5fad69e355a5..24949cd3a88b8015 100644
--- a/sysdeps/s390/multiarch/Makefile
+++ b/sysdeps/s390/multiarch/Makefile
@@ -18,8 +18,7 @@ sysdep_routines += strlen strlen-vx strlen-c \
 		   memchr memchr-vx \
 		   rawmemchr rawmemchr-vx rawmemchr-c \
 		   memccpy memccpy-vx memccpy-c \
-		   memrchr memrchr-vx memrchr-c \
-		   mempcpy memcpy memcpy-s390x
+		   memrchr memrchr-vx memrchr-c
 endif
 
 ifeq ($(subdir),wcsmbs)
diff --git a/sysdeps/s390/multiarch/ifunc-impl-list.c b/sysdeps/s390/multiarch/ifunc-impl-list.c
index 2e57d01abc21522e..6969c480cc40e0e2 100644
--- a/sysdeps/s390/multiarch/ifunc-impl-list.c
+++ b/sysdeps/s390/multiarch/ifunc-impl-list.c
@@ -23,6 +23,7 @@
 #include <ifunc-resolve.h>
 #include <ifunc-memset.h>
 #include <ifunc-memcmp.h>
+#include <ifunc-memcpy.h>
 
 /* Maximum number of IFUNC implementations.  */
 #define MAX_IFUNC	3
@@ -95,23 +96,35 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
 	      )
 #endif /* HAVE_MEMCMP_IFUNC */
 
-#ifdef SHARED
-
+#if HAVE_MEMCPY_IFUNC
   IFUNC_IMPL (i, name, memcpy,
+# if HAVE_MEMCPY_Z196
 	      IFUNC_IMPL_ADD (array, i, memcpy,
-			      S390_IS_Z196 (stfle_bits), __memcpy_z196)
+			      S390_IS_Z196 (stfle_bits), MEMCPY_Z196)
+# endif
+# if HAVE_MEMCPY_Z10
 	      IFUNC_IMPL_ADD (array, i, memcpy,
-			      S390_IS_Z10 (stfle_bits), __memcpy_z10)
-	      IFUNC_IMPL_ADD (array, i, memcpy, 1, __memcpy_default))
+			      S390_IS_Z10 (stfle_bits), MEMCPY_Z10)
+# endif
+# if HAVE_MEMCPY_Z900_G5
+	      IFUNC_IMPL_ADD (array, i, memcpy, 1, MEMCPY_Z900_G5)
+# endif
+	      )
 
   IFUNC_IMPL (i, name, mempcpy,
+# if HAVE_MEMCPY_Z196
 	      IFUNC_IMPL_ADD (array, i, mempcpy,
-			      S390_IS_Z196 (stfle_bits), ____mempcpy_z196)
+			      S390_IS_Z196 (stfle_bits), MEMPCPY_Z196)
+# endif
+# if HAVE_MEMCPY_Z10
 	      IFUNC_IMPL_ADD (array, i, mempcpy,
-			      S390_IS_Z10 (stfle_bits), ____mempcpy_z10)
-	      IFUNC_IMPL_ADD (array, i, mempcpy, 1, ____mempcpy_default))
-
-#endif /* SHARED */
+			      S390_IS_Z10 (stfle_bits), MEMPCPY_Z10)
+# endif
+# if HAVE_MEMCPY_Z900_G5
+	      IFUNC_IMPL_ADD (array, i, mempcpy, 1, MEMPCPY_Z900_G5)
+# endif
+	      )
+#endif /* HAVE_MEMCPY_IFUNC  */
 
 #ifdef HAVE_S390_VX_ASM_SUPPORT
 
diff --git a/sysdeps/s390/multiarch/memcpy-s390x.S b/sysdeps/s390/multiarch/memcpy-s390x.S
deleted file mode 100644
index b38caac72b8742e6..0000000000000000
--- a/sysdeps/s390/multiarch/memcpy-s390x.S
+++ /dev/null
@@ -1,132 +0,0 @@
-/* CPU specific memcpy implementations.  31/64 bit S/390 version.
-   Copyright (C) 2012-2018 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-
-#include "sysdep.h"
-#include "asm-syntax.h"
-
-/* INPUT PARAMETERS
-     %r2 = target operands address
-     %r3 = source operands address
-     %r4 = number of bytes to copy.  */
-
-       .text
-
-#if defined SHARED && IS_IN (libc)
-
-ENTRY(____mempcpy_z196)
-	.machine "z196"
-	.machinemode "zarch_nohighgprs"
-	lgr     %r1,%r2         # Use as dest
-	la      %r2,0(%r4,%r2)  # Return dest + n
-	j	.L_Z196_start
-END(____mempcpy_z196)
-
-ENTRY(__memcpy_z196)
-	.machine "z196"
-	.machinemode "zarch_nohighgprs"
-	lgr     %r1,%r2         # r1: Use as dest ; r2: Return dest
-.L_Z196_start:
-# if !defined __s390x__
-	llgfr	%r4,%r4
-# endif /* !defined __s390x__  */
-	ltgr    %r4,%r4
-	je      .L_Z196_4
-	aghi    %r4,-1
-	srlg    %r5,%r4,8
-	ltgr    %r5,%r5
-	jne     .L_Z196_5
-.L_Z196_3:
-	exrl    %r4,.L_Z196_14
-.L_Z196_4:
-	br      %r14
-.L_Z196_5:
-	cgfi    %r5,262144      # Switch to mvcle for copies >64MB
-	jh      __memcpy_mvcle
-.L_Z196_2:
-	pfd     1,768(%r3)
-	pfd     2,768(%r1)
-	mvc     0(256,%r1),0(%r3)
-	aghi    %r5,-1
-	la      %r1,256(%r1)
-	la      %r3,256(%r3)
-	jne     .L_Z196_2
-	j       .L_Z196_3
-.L_Z196_14:
-	mvc     0(1,%r1),0(%r3)
-END(__memcpy_z196)
-
-ENTRY(____mempcpy_z10)
-	.machine "z10"
-	.machinemode "zarch_nohighgprs"
-	lgr     %r1,%r2         # Use as dest
-	la      %r2,0(%r4,%r2)  # Return dest + n
-	j	.L_Z10_start
-END(____mempcpy_z10)
-
-ENTRY(__memcpy_z10)
-	.machine "z10"
-	.machinemode "zarch_nohighgprs"
-	lgr     %r1,%r2         # r1: Use as dest ; r2: Return dest
-.L_Z10_start:
-# if !defined __s390x__
-	llgfr	%r4,%r4
-# endif /* !defined __s390x__  */
-	cgije   %r4,0,.L_Z10_4
-	aghi    %r4,-1
-	srlg    %r5,%r4,8
-	cgijlh  %r5,0,.L_Z10_13
-.L_Z10_3:
-	exrl    %r4,.L_Z10_15
-.L_Z10_4:
-	br      %r14
-.L_Z10_13:
-	cgfi    %r5,65535	# Switch to mvcle for copies >16MB
-	jh      __memcpy_mvcle
-.L_Z10_12:
-	pfd     1,768(%r3)
-	pfd     2,768(%r1)
-	mvc     0(256,%r1),0(%r3)
-	la      %r1,256(%r1)
-	la      %r3,256(%r3)
-	brctg   %r5,.L_Z10_12
-	j       .L_Z10_3
-.L_Z10_15:
-	mvc     0(1,%r1),0(%r3)
-END(__memcpy_z10)
-
-# define __mempcpy ____mempcpy_default
-#endif /* SHARED && IS_IN (libc) */
-
-#define memcpy __memcpy_default
-#include "../memcpy.S"
-#undef memcpy
-
-#if defined SHARED && IS_IN (libc)
-.globl   __GI_memcpy
-.set     __GI_memcpy,__memcpy_default
-.globl   __GI_mempcpy
-.set     __GI_mempcpy,____mempcpy_default
-.globl   __GI___mempcpy
-.set     __GI___mempcpy,____mempcpy_default
-#else
-.globl   memcpy
-.set     memcpy,__memcpy_default
-.weak    mempcpy
-.set     mempcpy,__mempcpy
-#endif
